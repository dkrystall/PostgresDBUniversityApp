2.Tables

CREATE TABLE PROFESSORS (
	PSSN CHAR(9) primary key,
	PNAME VARCHAR(10),
	GENDER VARCHAR(1),
	RANK VARCHAR(10),
	REASPE VARCHAR(10)
);

CREATE TABLE PROJECTS (
	PRONUM CHAR(9) primary key,
	SPONSOR VARCHAR(10),
	STARTDATE CHAR(10),
	ENDDATE CHAR(10),
	BUDGET INTEGER
);

CREATE TABLE GRADSTUDENTS (
	SSSN CHAR(9) primary key,
	SNAME VARCHAR(10),
	AGE INTEGER,
	GENDER VARCHAR(1),
	DEGREEPRO VARCHAR(10),
	SASSSN CHAR(9) NOT NULL,
	PRIMARY KEY  (SSSN),
   	FOREIGN KEY (SASSSN) REFERENCES GRADSTUDENTS (SSSN),
);

CREATE TABLE DEPARTMENTS (
	DNUM CHAR(9) primary key,
	DNAME VARCHAR(10),
	MAINOFFICE VARCHAR(10)
);

CREATE TABLE MANAGES (
	PSSN CHAR(9) ,
	PRONUM CHAR(9) UNIQUE,
	PINVEST VARCHAR(10),
	PRIMARY KEY  (PSSN),
   	FOREIGN KEY (PSSN) REFERENCES PROFESSORS (PSSN),
   	FOREIGN KEY (PRONUM) REFERENCES PROJECTS(PRONUM)
)

CREATE TABLE PROFWORKS (
	PSSN CHAR(9) ,
	PRONUM CHAR(9),
	COINVEST VARCHAR(10),
	PRIMARY KEY  (PSSN, PRONUM),
   	FOREIGN KEY (PSSN) REFERENCES PROFESSORS (PSSN),
   	FOREIGN KEY (PRONUM) REFERENCES PROJECTS(PRONUM)
)

CREATE TABLE STUDWORKS (
	PRONUM CHAR(9),
	SSSN CHAR(9) ,
	REASSIST VARCHAR(10),
	PRIMARY KEY  (SSSN),
   	FOREIGN KEY (PRONUM) REFERENCES PROJECTS(PRONUM),
	FOREIGN KEY (SSSN) REFERENCES GRADSTUDENTS (SSSN)
)

CREATE TABLE PROFRUNS (
	PSSN CHAR(9) ,
	DNUM CHAR(9) UNIQUE,
	CHAIRMAN VARCHAR(10),
	PRIMARY KEY  (PSSN),
   	FOREIGN KEY (PSSN) REFERENCES PROFESSORS (PSSN),
   	FOREIGN KEY (DNUM) REFERENCES DEPARTMENTS(DNUM)
)

CREATE TABLE PROFWD (
	PSSN CHAR(9) ,
	DNUM CHAR(9) ,
	PRIMARY KEY  (PSSN),
   	FOREIGN KEY (PSSN) REFERENCES PROFESSORS (PSSN),
   	FOREIGN KEY (DNUM) REFERENCES DEPARTMENTS(DNUM)
)

CREATE TABLE STUDWD (
	SSSN CHAR(9) ,
	DNUM CHAR(9) ,
	PRIMARY KEY  (SSSN),
   	FOREIGN KEY (SSSN) REFERENCES GRADSTUDENTS (SSSN),
   	FOREIGN KEY (DNUM) REFERENCES DEPARTMENTS(DNUM)
)


2.Sample Data

INSERT INTO PROFESSORS
VALUES(30249, 'Jim', 'M', 3, 'Computsci')

INSERT INTO PROFESSORS
VALUES(44556, 'Matt', 'M', 2, 'Engin')

INSERT INTO PROFESSORS
VALUES(67453, 'Laura', 'F', 2, 'Computsci')

INSERT INTO PROFESSORS
VALUES(26341, 'Robin', 'F', 3, 'Engin')

INSERT INTO PROFESSORS
VALUES(76532, 'Gordon', 'M', 1, 'Computsci')

INSERT INTO PROFESSORS
VALUES(43673, 'Maya', 'F', 1, 'Engin')

INSERT INTO PROFESSORS
VALUES(10403, 'Gary', 'M', 4, 'Computsci')

INSERT INTO PROFESSORS
VALUES(23443, 'Darrel', 'M', 5, 'Computsci')

INSERT INTO PROFESSORS
VALUES(78901, 'Rose', 'F', 6, 'Computsci')

INSERT INTO PROFESSORS
VALUES(66277, 'Jack', 'F', 7, 'Computsci')

INSERT INTO PROJECTS
VALUES(1, 'Apple', '1/20/18', '4/19/18', 100000)

INSERT INTO PROJECTS
VALUES(2, 'Ford', '3/10/18', '7/15/18', 284000)

INSERT INTO PROJECTS
VALUES(3, 'Micro', '2/16/18', '9/10/18', 550000)

INSERT INTO PROJECTS
VALUES(4, 'Tesla', '12/10/17', '5/03/18', 472000)

INSERT INTO GRADSTUDENTS
VALUES(112233, 'Silm', 30, 'M', 'Computsci', 112233)

INSERT INTO GRADSTUDENTS
VALUES(125612, 'Karen', 28, 'F', 'Computsci', 112233)

INSERT INTO GRADSTUDENTS
VALUES(167234, 'Kevin', 29, 'M', 'Engin', 155561)

INSERT INTO GRADSTUDENTS
VALUES(155561, 'Mick', 31, 'M', 'Engin', 155561)

INSERT INTO GRADSTUDENTS
VALUES(136912, 'Rachel', 27, 'F', 'Engin', 167234)

INSERT INTO GRADSTUDENTS
VALUES(147563, 'Sarah', 26, 'F', 'Engin', 136912)

INSERT INTO GRADSTUDENTS
VALUES(198672, 'Alan', 27, 'M', 'Computsci', 125612)

INSERT INTO GRADSTUDENTS
VALUES(144534, 'Joseph', 26, 'M', 'Computsci', 198672)

INSERT INTO DEPARTMENTS
VALUES(123, 'Computsci', 'ET321')

INSERT INTO DEPARTMENTS
VALUES(456, 'Engin', 'ET202')

INSERT INTO MANAGES
VALUES(76532, 1, 'Gordon' )

INSERT INTO MANAGES
VALUES(44556, 2, 'Matt')

INSERT INTO MANAGES
VALUES(43673, 3, 'Maya')

INSERT INTO MANAGES
VALUES(67453, 4, 'Laura')

INSERT INTO PROFWORKS
VALUES(30249, 4, 'Jim')

INSERT INTO PROFWORKS
VALUES(26341, 3, 'Robin')

INSERT INTO PROFWORKS
VALUES(10403, 4, 'Gary')

INSERT INTO PROFWORKS
VALUES(23443, 4, 'Darrel')

INSERT INTO PROFWORKS
VALUES(78901, 4, 'Rose')

INSERT INTO PROFWORKS
VALUES(66277, 1, 'Jack')

INSERT INTO STUDWORKS
VALUES(1, 112233, 'Silm')

INSERT INTO STUDWORKS
VALUES(2, 167234, 'Kevin')

INSERT INTO STUDWORKS
VALUES(2, 155561, 'Mick')

INSERT INTO STUDWORKS
VALUES(3, 136912, 'Rachel')

INSERT INTO STUDWORKS
VALUES(3, 147563, 'Sarah')

INSERT INTO STUDWORKS
VALUES(4, 198672, 'Alan')

INSERT INTO STUDWORKS
VALUES(4, 144534, 'Joseph')

INSERT INTO STUDWD
VALUES(112233, 123)

INSERT INTO STUDWD
VALUES(125612, 123)

INSERT INTO STUDWD
VALUES(167234, 456)

INSERT INTO STUDWD
VALUES(155561, 456)

INSERT INTO STUDWD
VALUES(136912, 456)

INSERT INTO STUDWD
VALUES(147563, 456)

INSERT INTO STUDWD
VALUES(198672, 123)

INSERT INTO STUDWD
VALUES(144534, 123)

INSERT INTO PROFRUNS
VALUES(76532, 123, 'Gordon')

INSERT INTO PROFRUNS
VALUES(43673, 456, 'Maya')

INSERT INTO PROFWD
VALUES(67453, 123)

INSERT INTO PROFWD
VALUES(30249, 123)

INSERT INTO PROFWD
VALUES(44556, 456)

INSERT INTO PROFWD
VALUES(26341, 456)


3.Functions and Triggers

a.
CREATE OR REPLACE FUNCTION female_faculty() RETURNS double precision AS $$
DECLARE female_percent double precision  :=1;
BEGIN
	female_percent := ((select count(gender) from PROFESSORS where gender = 'F')
	/ CAST ((select count(*) from PROFESSORS) AS Float)) * 100.00;
	RETURN female_percent;
END;
$$ LANGUAGE plpgsql; 

b.
CREATE OR REPLACE FUNCTION total_people(pronum) RETURNS integer AS $$
DECLARE 
	pno_name ALIAS FOR $1;
	pno_id INTEGER;
BEGIN
	SELECT pronum INTO pno_id FROM PROFWORKS
		WHERE coinvest = pno_name;
	RETURN pno_id
END;
$$ LANGUAGE plpgsql; 

people_amt integer :=1;
people_amt := (select count(pronum) from PROFWORKS) +
			(select count(pronum) from MANAGES) +
			(select count(pronum) from STUDWORKS);
			RETURN people_amt;

c.		
CREATE TRIGGER faculty_restrict
BEFORE INSERT OR UPDATE ON PROFWORKS
FOR EACH ROW EXECUTE PROCEDURE faculty_restrict();

CREATE FUNCTION	faculty_restrict() RETURNS trigger AS $$
DECLARE num_copi int4 :=1;
BEGIN
	num_copi = (select count(pronum) from PROFWORKS);
	IF  num_copi > 4
	THEN RAISE EXCEPTION 'There are too many co-investigators for this project';
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql; 

INSERT INTO PROFWORKS
VALUES(67453, 4, 'Laura)

d.
CREATE TRIGGER student_restrict
BEFORE INSERT OR UPDATE ON STUDWORKS
FOR EACH ROW EXECUTE PROCEDURE student_restrict();

CREATE FUNCTION	student_restrict() RETURNS trigger AS $$
BEGIN
	PERFORM * FROM studworks where sssn = NEW.sssn
	IF FOUND THEN 
		RAISE 'Student is already present in table';
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql; 

INSERT INTO STUDWORKS
VALUES(1, 125612, 'Karen')















